generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Aluno {
  freemium             Boolean                @default(true)
  instituicaoId        Int
  usuarioId            Int                    @id
  instituicao          instituicao            @relation(fields: [instituicaoId], references: [id])
  usuario              usuario                @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  matricula            matricula[]
  tentativa            tentativa[]
  turmaaluno           turmaaluno[]
  visualizacaoconteudo visualizacaoconteudo[]

  @@index([instituicaoId], map: "alunos_instituicaoId_fkey")
  @@map("alunos")
}

model Professor {
  liberado       Boolean          @default(false)
  instituicaoId  Int
  usuarioId      Int              @id
  feedback       feedback[]
  professorcurso professorcurso[]
  instituicao    instituicao      @relation(fields: [instituicaoId], references: [id])
  usuario        usuario          @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  turma          turma[]

  @@index([instituicaoId], map: "professores_instituicaoId_fkey")
  @@map("professores")
}

model Administrador {
  usuarioId     Int         @unique
  instituicaoId Int
  ativo         Boolean     @default(true)
  criadoEm      DateTime    @default(now())
  atualizadoEm  DateTime    @updatedAt
  id            Int         @id @default(autoincrement())
  instituicao   instituicao @relation(fields: [instituicaoId], references: [id])
  usuario       usuario     @relation(fields: [usuarioId], references: [id])

  @@index([instituicaoId], map: "administradores_instituicaoId_fkey")
  @@map("administradores")
}

model atividade {
  id          Int            @id @default(autoincrement())
  conteudoId  Int
  titulo      String         @db.VarChar(150)
  enunciado   String         @db.Text
  tipo        atividade_tipo @default(objetiva)
  peso        Decimal        @default(1.00) @db.Decimal(4, 2)
  ativo       Boolean        @default(true)
  dataCriacao DateTime       @default(now())
  conteudo    conteudo       @relation(fields: [conteudoId], references: [id], onDelete: Cascade, map: "Atividade_conteudoId_fkey")
  tentativa   tentativa[]

  @@index([conteudoId], map: "idx_atividades_conteudo_id")
}

model conteudo {
  id                   Int                    @id @default(autoincrement())
  cursoId              Int
  titulo               String                 @db.VarChar(150)
  descricao            String?                @db.Text
  tipo                 conteudo_tipo
  urlArquivo           String?                @db.Text
  ordem                Int                    @default(0)
  ativo                Boolean                @default(true)
  dataCriacao          DateTime               @default(now())
  ultimaAtualizacao    DateTime
  atividade            atividade[]
  curso                curso                  @relation(fields: [cursoId], references: [id], onDelete: Cascade, map: "Conteudo_cursoId_fkey")
  visualizacaoconteudo visualizacaoconteudo[]

  @@index([cursoId], map: "idx_conteudos_curso_id")
}

model conversa {
  id                   Int                    @id @default(autoincrement())
  nome                 String?                @db.VarChar(150)
  tipo                 conversa_tipo
  criadoEm             DateTime               @default(now())
  conversaparticipante conversaparticipante[]
  mensagem             mensagem[]
}

model conversaparticipante {
  id           Int      @id @default(autoincrement())
  conversaId   Int
  usuarioId    Int
  adicionadoEm DateTime @default(now())
  conversa     conversa @relation(fields: [conversaId], references: [id], onDelete: Cascade, map: "ConversaParticipante_conversaId_fkey")
  usuario      usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade, map: "ConversaParticipante_usuarioId_fkey")

  @@unique([conversaId, usuarioId], map: "ConversaParticipante_conversaId_usuarioId_key")
  @@index([usuarioId], map: "ConversaParticipante_usuarioId_fkey")
}

model curso {
  id             Int              @id @default(autoincrement())
  nome           String           @db.VarChar(150)
  criadoEm       DateTime         @default(now())
  conteudo       conteudo[]
  matricula      matricula[]
  professorcurso professorcurso[]
  turma          turma[]
}

model feedback {
  id           Int       @id @default(autoincrement())
  tentativaId  Int
  professorId  Int
  mensagem     String    @db.Text
  dataFeedback DateTime  @default(now())
  professores  Professor @relation(fields: [professorId], references: [usuarioId], onDelete: Cascade, map: "Feedback_professorId_fkey")
  tentativa    tentativa @relation(fields: [tentativaId], references: [id], onDelete: Cascade, map: "Feedback_tentativaId_fkey")

  @@index([tentativaId], map: "Feedback_tentativaId_fkey")
  @@index([professorId], map: "idx_feedbacks_professor")
}

model instituicao {
  id              Int                @id @default(autoincrement())
  nome            String             @db.VarChar(150)
  dominioEmail    String?            @unique(map: "Instituicao_dominioEmail_key") @db.VarChar(100)
  cnpj            String?            @unique(map: "Instituicao_cnpj_key") @db.VarChar(18)
  emailContato    String?            @db.VarChar(150)
  telefoneContato String?            @db.VarChar(20)
  status          instituicao_status @default(ativa)
  dataCadastro    DateTime           @default(now())
  administradores Administrador[]
  alunos          Aluno[]
  professores     Professor[]
  turma           turma[]
}

model matricula {
  id                 Int              @id @default(autoincrement())
  alunoId            Int
  cursoId            Int
  dataMatricula      DateTime         @default(now())
  status             matricula_status @default(ativa)
  notaFinal          Decimal?         @db.Decimal(5, 2)
  certificadoEmitido Boolean          @default(false)
  alunos             Aluno            @relation(fields: [alunoId], references: [usuarioId], onDelete: Cascade, map: "Matricula_alunoId_fkey")
  curso              curso            @relation(fields: [cursoId], references: [id], onDelete: Cascade, map: "Matricula_cursoId_fkey")

  @@unique([alunoId, cursoId], map: "Matricula_alunoId_cursoId_key")
  @@index([cursoId], map: "Matricula_cursoId_fkey")
}

model mensagem {
  id           Int            @id @default(autoincrement())
  conversaId   Int
  remetenteId  Int
  conteudo     String         @db.Text
  dataEnvio    DateTime       @default(now())
  editada      Boolean        @default(false)
  deletada     Boolean        @default(false)
  conversa     conversa       @relation(fields: [conversaId], references: [id], onDelete: Cascade, map: "Mensagem_conversaId_fkey")
  usuario      usuario        @relation(fields: [remetenteId], references: [id], onDelete: Cascade, map: "Mensagem_remetenteId_fkey")
  mensagemlida mensagemlida[]

  @@index([remetenteId], map: "Mensagem_remetenteId_fkey")
  @@index([conversaId, dataEnvio], map: "idx_conversa_envio")
}

model mensagemlida {
  id          Int      @id @default(autoincrement())
  mensagemId  Int
  usuarioId   Int
  dataLeitura DateTime @default(now())
  mensagem    mensagem @relation(fields: [mensagemId], references: [id], onDelete: Cascade, map: "MensagemLida_mensagemId_fkey")
  usuario     usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade, map: "MensagemLida_usuarioId_fkey")

  @@unique([mensagemId, usuarioId], map: "MensagemLida_mensagemId_usuarioId_key")
  @@index([usuarioId], map: "MensagemLida_usuarioId_fkey")
}

model professorcurso {
  id             Int       @id @default(autoincrement())
  professorId    Int
  cursoId        Int
  dataAtribuicao DateTime  @default(now())
  curso          curso     @relation(fields: [cursoId], references: [id], onDelete: Cascade, map: "ProfessorCurso_cursoId_fkey")
  professores    Professor @relation(fields: [professorId], references: [usuarioId], onDelete: Cascade, map: "ProfessorCurso_professorId_fkey")

  @@unique([professorId, cursoId], map: "ProfessorCurso_professorId_cursoId_key")
  @@index([cursoId], map: "ProfessorCurso_cursoId_fkey")
}

model tentativa {
  id            Int        @id @default(autoincrement())
  atividadeId   Int
  alunoId       Int
  resposta      String?    @db.Text
  pontuacao     Decimal    @default(0.00) @db.Decimal(4, 2)
  dataTentativa DateTime   @default(now())
  feedback      feedback[]
  alunos        Aluno      @relation(fields: [alunoId], references: [usuarioId], onDelete: Cascade, map: "Tentativa_alunoId_fkey")
  atividade     atividade  @relation(fields: [atividadeId], references: [id], onDelete: Cascade, map: "Tentativa_atividadeId_fkey")

  @@index([alunoId], map: "Tentativa_alunoId_fkey")
  @@index([atividadeId], map: "Tentativa_atividadeId_fkey")
}

model turma {
  id            Int          @id @default(autoincrement())
  nome          String       @db.VarChar(100)
  cursoId       Int
  professorId   Int
  instituicaoId Int?
  dataInicio    DateTime?
  dataFim       DateTime?
  curso         curso        @relation(fields: [cursoId], references: [id], onDelete: Cascade, map: "Turma_cursoId_fkey")
  instituicao   instituicao? @relation(fields: [instituicaoId], references: [id], map: "Turma_instituicaoId_fkey")
  professores   Professor    @relation(fields: [professorId], references: [usuarioId], onDelete: Cascade, map: "Turma_professorId_fkey")
  turmaaluno    turmaaluno[]

  @@index([cursoId], map: "Turma_cursoId_fkey")
  @@index([instituicaoId], map: "Turma_instituicaoId_fkey")
  @@index([professorId], map: "Turma_professorId_fkey")
}

model turmaaluno {
  id          Int      @id @default(autoincrement())
  turmaId     Int
  alunoId     Int
  dataEntrada DateTime @default(now())
  alunos      Aluno    @relation(fields: [alunoId], references: [usuarioId], onDelete: Cascade, map: "TurmaAluno_alunoId_fkey")
  turma       turma    @relation(fields: [turmaId], references: [id], onDelete: Cascade, map: "TurmaAluno_turmaId_fkey")

  @@index([alunoId], map: "TurmaAluno_alunoId_fkey")
  @@index([turmaId], map: "TurmaAluno_turmaId_fkey")
}

model usuario {
  id                   Int                    @id @default(autoincrement())
  nome                 String                 @db.VarChar(100)
  email                String                 @unique(map: "Usuario_email_key") @db.VarChar(150)
  senhaHash            String                 @db.VarChar(255)
  perfil               usuario_perfil
  criadoEm             DateTime               @default(now())
  admin                Administrador?
  aluno                Aluno?
  conversaparticipante conversaparticipante[]
  mensagem             mensagem[]
  mensagemlida         mensagemlida[]
  professor            Professor?
}

model visualizacaoconteudo {
  id               Int      @id @default(autoincrement())
  alunoId          Int
  conteudoId       Int
  dataVisualizacao DateTime @default(now())
  alunos           Aluno    @relation(fields: [alunoId], references: [usuarioId], onDelete: Cascade, map: "VisualizacaoConteudo_alunoId_fkey")
  conteudo         conteudo @relation(fields: [conteudoId], references: [id], onDelete: Cascade, map: "VisualizacaoConteudo_conteudoId_fkey")

  @@unique([alunoId, conteudoId], map: "VisualizacaoConteudo_alunoId_conteudoId_key")
  @@index([conteudoId], map: "VisualizacaoConteudo_conteudoId_fkey")
}

enum conversa_tipo {
  privada
  grupo
}

enum atividade_tipo {
  objetiva
  discursiva
  m_ltipla_escolha @map("múltipla_escolha")
}

enum conteudo_tipo {
  video
  leitura
  quiz
  simulado
  pdf
  audio
  desafio
}

enum matricula_status {
  ativa
  concluida
  cancelada
}

enum usuario_perfil {
  aluno
  professor
  admin
}

enum instituicao_status {
  ativa
  inativa
}
